/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

import io.qameta.allure.gradle.base.AllureExtension
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.lang.System.getenv

plugins {
    // Apply the java plugin to add support for Java
    java

    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.8.0"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    "application"

    id("io.freefair.lombok") version ("8.0.1")

    id("io.qameta.allure") version "2.10.0"
}



java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(Version.JAVA.id.toInt()))
    }
}

tasks {
    javadoc {
        options.encoding = "UTF-8"
    }
    compileJava {
        options.release.set(Version.JAVA.id.toInt())
        options.encoding = "UTF-8"
    }
    compileTestJava {
        options.release.set(Version.JAVA.id.toInt())
        // options.encoding = "UTF-8"
    }
}
val compileKotlin: KotlinCompile by tasks
tasks.withType<KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        // allWarningsAsErrors = true
        javaParameters = true
    }
}

val compileTestKotlin: KotlinCompile by tasks
tasks.withType<KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        // allWarningsAsErrors = true
        javaParameters = true
    }
}

sourceSets {
    main {
        java.srcDirs(
            listOf(
                SourceSet.MAIN_JAVA.path
            )
        )
        kotlin.srcDirs(
            listOf(
                SourceSet.MAIN_JAVA.path,
                SourceSet.MAIN_KOTLIN.path
            )
        )
        resources {
            exclude("META-INF/beans.xml")
        }
    }
    test {
        kotlin.srcDirs(
            listOf(
                SourceSet.TEST_JAVA.path,
                SourceSet.TEST_KOTLIN.path
            )
        )
    }
}


repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${Version.KOTLIN.id}")

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:30.1.1-jre")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    implementation("org.junit.jupiter:junit-jupiter-api:${Version.JUNIT_JUPITER.id}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${Version.JUNIT_JUPITER.id}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${Version.JUNIT_JUPITER.id}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${Version.JUNIT_JUPITER.id}")
    testImplementation("org.junit.vintage:junit-vintage-engine:${Version.JUNIT_JUPITER.id}")
    testImplementation("org.junit.platform:junit-platform-launcher:${Version.JUNIT_PLATFORM.id}")
    testImplementation("org.junit.platform:junit-platform-runner:${Version.JUNIT_PLATFORM.id}")
    testImplementation("org.junit.platform:junit-platform-engine:${Version.JUNIT_PLATFORM.id}")
    testImplementation("org.junit.platform:junit-platform-suite-api:${Version.JUNIT_PLATFORM.id}")
    testImplementation("org.junit.platform:junit-platform-console-standalone:${Version.JUNIT_PLATFORM.id}")
    implementation("org.junit.platform:junit-platform-reporting:${Version.JUNIT_PLATFORM.id}")

    // testImplementation("io.qameta.allure:allure-java-commons:${Version.ALLURE.id}")
    implementation("io.qameta.allure:allure-java-commons:${Version.ALLURE.id}")
    // implementation("io.qameta.allure:allure-cucumber6-jvm:${Version.ALLURE.id}")

    implementation("io.qameta.allure:allure-attachments:${Version.ALLURE.id}")

    // implementation("io.qameta.allure:allure-rest-assured:${Version.ALLURE.id}")
    // implementation("io.qameta.allure:allure-generator:${Version.ALLURE.id}")
    testRuntimeOnly("io.qameta.allure:allure-junit5:${Version.ALLURE.id}")

    compileOnly("org.projectlombok:lombok:${Version.LOMBOK.id}")
    annotationProcessor("org.projectlombok:lombok:${Version.LOMBOK.id}")

    runtimeOnly("org.aspectj:aspectjweaver:${Version.ASPECTJ.id}")
    runtimeOnly("org.aspectj:aspectjrt:${Version.ASPECTJ.id}")
    implementation("org.aspectj:aspectjtools:${Version.ASPECTJ.id}")

    testCompileOnly("org.projectlombok:lombok:${Version.LOMBOK.id}")
    testAnnotationProcessor("org.projectlombok:lombok:${Version.LOMBOK.id}")

    implementation("net.datafaker:datafaker:1.4.0")
}


testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest()
        }
    }
}

configure<AllureExtension> {
    adapter {
        autoconfigure.set(true)
        aspectjWeaver.set(true)

        frameworks {
            junit5 {
                allureJavaVersion.set(Version.JAVA.id)
                version = Version.ALLURE.id
                adapterVersion.set(Version.ALLURE.id)
                enabled.set(true)
                autoconfigureListeners.set(true)
            }
        }
    }

    report {
        reportDir.set(project.reporting.baseDirectory.dir("allure-report"))
    }
}

tasks.withType<Test>().configureEach {
    group = "verification"
    classpath = sourceSets.test.get().runtimeClasspath

    // TODO: remove this one if not needed
    testLogging.showStandardStreams = true
    testLogging.displayGranularity = 2
    testLogging.showCauses = true
    testLogging.showExceptions = true
    // testLogging.events = setOf(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STANDARD_ERROR, TestLogEvent.STANDARD_OUT, TestLogEvent.STARTED)
    testLogging.events = setOf(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED)
    testLogging.showStackTraces
    testLogging.exceptionFormat = TestExceptionFormat.FULL

    maxParallelForks = (Runtime.getRuntime().availableProcessors() / 2).takeIf { it > 0 } ?: 1
    setForkEvery(20)

    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")

    val iTags = System.getProperty("includeTags") ?: ""
    if ("" == iTags) {
        useJUnitPlatform()
    } else {
        useJUnitPlatform {
            includeTags(iTags)
        }
    }

    ignoreFailures = getenv("GRADLE_IGNORE_FAILURES").toBoolean()
}

enum class Version(val id: String) {
    JUNIT_JUPITER("5.9.2"),
    JUNIT_PLATFORM("1.9.2"),
    APACHE_COMMONS_EMAIL("1.5"),
    ALLURE_PLUGIN("2.10.0"),
    ALLURE("2.20.1"),

    // SLF4J("2.0.0"),
    SLF4J("1.7.36"),
    LOGBACK("1.4.5"),
    DAGGER("2.42"),
    JAVA("11"),
    KOTLIN("1.8.0"),
    LOMBOK("1.18.26"),
    ASPECTJ("1.9.9.1"),
    GRADLE("7.4.1");
}

enum class SourceSet(val path: String) {
    MAIN_JAVA("src/main/java"),
    MAIN_KOTLIN("src/main/kotlin"),
    TEST_JAVA("src/test/java"),
    TEST_KOTLIN("src/test/kotlin");
}
